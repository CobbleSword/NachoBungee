From 577dc4db854127cc559bb0281e6c3bd123245c99 Mon Sep 17 00:00:00 2001
From: Sprock <github@heathlogancampbell.com>
Date: Tue, 10 Nov 2020 01:59:14 +1300
Subject: [PATCH] XCord's AntiExploitUpstreamBridge


diff --git a/proxy/src/main/java/dev/cobblesword/nachobungee/AntiExploitUpstreamBridge.java b/proxy/src/main/java/dev/cobblesword/nachobungee/AntiExploitUpstreamBridge.java
new file mode 100644
index 00000000..6e375ec8
--- /dev/null
+++ b/proxy/src/main/java/dev/cobblesword/nachobungee/AntiExploitUpstreamBridge.java
@@ -0,0 +1,70 @@
+package dev.cobblesword.nachobungee;
+
+import net.md_5.bungee.BungeeCord;
+import net.md_5.bungee.UserConnection;
+import net.md_5.bungee.api.ProxyServer;
+import net.md_5.bungee.connection.UpstreamBridge;
+import net.md_5.bungee.protocol.PacketWrapper;
+
+// Credit: Xcord https://www.mc-market.org/resources/16843/
+// Credit: Bob7I
+public class AntiExploitUpstreamBridge extends UpstreamBridge
+{
+    private static int largestPacketLength = 1000;
+    private static int largestPacketLengthOnTick = 1000;
+    private static int largestPacketAmountSentOnTick = 40;
+    private final String monitoringUser;
+    private int packetLengthOnTick = 0;
+    private int packetsSentOnTick = 0;
+    private int watchingTick = -1;
+
+    public AntiExploitUpstreamBridge(ProxyServer bungee, UserConnection con) {
+        super(bungee, con);
+        this.monitoringUser = con.getName();
+    }
+
+    public boolean shouldHandle(PacketWrapper packet) throws Exception {
+        if (this.ignoreIncoming)
+            return false;
+
+        int currentTick = NachoBungee.getBaseTick();
+        if (currentTick != this.watchingTick) {
+            this.watchingTick = currentTick;
+            if (largestPacketAmountSentOnTick < this.packetsSentOnTick) {
+                largestPacketAmountSentOnTick = this.packetsSentOnTick;
+                BungeeCord.getInstance().getLogger().info("ExploitMonitor> Largest received packet amount/T is now " + largestPacketAmountSentOnTick + "/t from " + this.monitoringUser);
+            }
+
+            if (largestPacketLengthOnTick < this.packetLengthOnTick) {
+                largestPacketLengthOnTick = this.packetLengthOnTick;
+                BungeeCord.getInstance().getLogger().info("ExploitMonitor> Largest received packet length/T is now " + largestPacketLengthOnTick + "/t from " + this.monitoringUser);
+            }
+
+            this.packetsSentOnTick = 0;
+            this.packetLengthOnTick = 0;
+        }
+
+        int packetLength = packet.buf.readableBytes();
+        if (packetLength > NachoBungee.MAX_PACKET_BYTES) {
+            BungeeCord.getInstance().getLogger().info(this.monitoringUser + " just sent a packet " + packetLength + " bytes long. Terminated the connection! Fuck that guy!");
+            this.killConnection();
+            return false;
+        } else if ((this.packetLengthOnTick += packetLength) > NachoBungee.MAX_PACKET_BYTES_PER_TICK) {
+            BungeeCord.getInstance().getLogger().info(this.monitoringUser + " sent " + this.packetLengthOnTick + " bytes in a tick. Terminated the connection! Fuck that guy!");
+            this.killConnection();
+            return false;
+        } else if (++this.packetsSentOnTick > NachoBungee.MAX_PACKETS_PER_TICK) {
+            BungeeCord.getInstance().getLogger().info(this.monitoringUser + " sent " + this.packetsSentOnTick + " packets in a tick. Terminated the connection! Fuck that guy!");
+            this.killConnection();
+            return false;
+        } else {
+            if (packetLength > largestPacketLength) {
+                largestPacketLength = packetLength;
+                System.out.println("ExploitMonitor> ExploitFixer: Largest received packet is now " + packetLength + " bytes from " + this.monitoringUser);
+            }
+
+            return super.shouldHandle(packet);
+        }
+
+    }
+}
\ No newline at end of file
diff --git a/proxy/src/main/java/dev/cobblesword/nachobungee/NachoBungee.java b/proxy/src/main/java/dev/cobblesword/nachobungee/NachoBungee.java
new file mode 100644
index 00000000..79fadec9
--- /dev/null
+++ b/proxy/src/main/java/dev/cobblesword/nachobungee/NachoBungee.java
@@ -0,0 +1,28 @@
+package dev.cobblesword.nachobungee;
+
+import java.util.Timer;
+import java.util.TimerTask;
+
+public class NachoBungee extends TimerTask
+{
+    public static final int MAX_PACKETS_PER_TICK = 500;
+    public static final int MAX_PACKET_BYTES_PER_TICK = 100000;
+    public static final int MAX_PACKET_BYTES = 12000;
+
+    private static int baseTick = 0;
+
+    public NachoBungee()
+    {
+        (new Timer("NachoBungee-base", true)).scheduleAtFixedRate(this, 1000L, 1000L);
+    }
+
+    @Override
+    public void run() {
+        baseTick++;
+    }
+
+    public static int getBaseTick()
+    {
+        return baseTick;
+    }
+}
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
index a17ed68e..edb16d41 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
@@ -9,6 +9,7 @@ import com.google.common.collect.Sets;
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
+import dev.cobblesword.nachobungee.NachoBungee;
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import io.github.waterfallmc.waterfall.conf.WaterfallConfiguration;
 import io.github.waterfallmc.waterfall.event.ProxyExceptionEvent;
@@ -315,6 +316,14 @@ public class BungeeCord extends ProxyServer
         }, 0, TimeUnit.MINUTES.toMillis( 5 ) );
         //metricsThread.scheduleAtFixedRate( new Metrics(), 0, TimeUnit.MINUTES.toMillis( Metrics.PING_INTERVAL ) ); // Waterfall: Disable Metrics
 
+        try {
+            new NachoBungee();
+        } catch (Exception e) {
+            System.out.println("Failed to initialize anti-exploit/bot security measures. System will now be force-exited");
+            e.printStackTrace();
+            System.exit(0);
+        }
+
         Runtime.getRuntime().addShutdownHook( new Thread()
         {
             @Override
diff --git a/proxy/src/main/java/net/md_5/bungee/ServerConnection.java b/proxy/src/main/java/net/md_5/bungee/ServerConnection.java
index 5e452780..dfa008ef 100644
--- a/proxy/src/main/java/net/md_5/bungee/ServerConnection.java
+++ b/proxy/src/main/java/net/md_5/bungee/ServerConnection.java
@@ -90,6 +90,10 @@ public class ServerConnection implements Server
         return unsafe;
     }
 
+    public void forceDisconnect() {
+        this.ch.forceClose();
+    }
+
     @Data
     public static class KeepAliveData
     {
diff --git a/proxy/src/main/java/net/md_5/bungee/UserConnection.java b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
index 986a9d05..1612b2cf 100644
--- a/proxy/src/main/java/net/md_5/bungee/UserConnection.java
+++ b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
@@ -233,6 +233,16 @@ public final class UserConnection implements ProxiedPlayer
         connect( target, reason );
     }
 
+    public void forceClose() {
+        if (!this.ch.isClosed()) {
+            if (this.server != null) {
+                this.server.setObsolete(true);
+                this.server.forceDisconnect();
+            }
+            this.ch.forceClose();
+        }
+    }
+
     public ServerInfo updateAndGetNextServer(ServerInfo currentTarget)
     {
         if ( serverJoinQueue == null )
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
index fe6ff143..09e157d5 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
@@ -19,6 +19,7 @@ import com.google.gson.Gson;
 
 import com.google.gson.JsonElement;
 import com.google.gson.JsonObject;
+import dev.cobblesword.nachobungee.AntiExploitUpstreamBridge;
 import lombok.Getter;
 import lombok.RequiredArgsConstructor;
 import net.md_5.bungee.BungeeCord;
@@ -564,7 +565,7 @@ public class InitialHandler extends PacketHandler implements PendingConnection
                             unsafe.sendPacket( new LoginSuccess( getUniqueId(), getName() ) );
                             ch.setProtocol( Protocol.GAME );
 
-                            ch.getHandle().pipeline().get( HandlerBoss.class ).setHandler( new UpstreamBridge( bungee, userCon ) );
+                            ch.getHandle().pipeline().get( HandlerBoss.class ).setHandler( new AntiExploitUpstreamBridge( bungee, userCon ) );
                             bungee.getPluginManager().callEvent( new PostLoginEvent( userCon ) );
                             ServerInfo server;
                             if ( bungee.getReconnectHandler() != null )
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java b/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
index ad3bdee5..2eadec8a 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
@@ -42,6 +42,8 @@ public class UpstreamBridge extends PacketHandler
 
     private long lastTabCompletion = -1;
 
+    protected boolean ignoreIncoming = false;
+
     public UpstreamBridge(ProxyServer bungee, UserConnection con)
     {
         this.bungee = bungee;
@@ -52,6 +54,11 @@ public class UpstreamBridge extends PacketHandler
         con.unsafe().sendPacket( BungeeCord.getInstance().registerChannels( con.getPendingConnection().getVersion() ) );
     }
 
+    public void killConnection() {
+        this.ignoreIncoming = true;
+        this.con.forceClose();
+    }
+
     @Override
     public void exception(Throwable t) throws Exception
     {
diff --git a/proxy/src/main/java/net/md_5/bungee/netty/ChannelWrapper.java b/proxy/src/main/java/net/md_5/bungee/netty/ChannelWrapper.java
index 6dc5633f..0e6e0736 100644
--- a/proxy/src/main/java/net/md_5/bungee/netty/ChannelWrapper.java
+++ b/proxy/src/main/java/net/md_5/bungee/netty/ChannelWrapper.java
@@ -89,6 +89,13 @@ public class ChannelWrapper
         }
     }
 
+    public void forceClose() {
+        if (!this.closed) {
+            this.closed = this.closing = true;
+            this.ch.close();
+        }
+    }
+
     public void delayedClose(final Kick kick)
     {
         if ( !closing )
-- 
2.20.1 (Apple Git-117)

